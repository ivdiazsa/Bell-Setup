;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(require 'package)
(require 'ibuf-ext)
(require 'multiple-cursors)

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

;; Load my Org-Mode configuration.

(load-file "~/.emacs.d/my-org-mode-config.el")

;; Some file extensions use the same syntax as XML. Let Emacs to enable xml-mode
;; by default when editing these types of files.

(add-to-list 'auto-mode-alist '("\\.csproj\\'"  . xml-mode))
(add-to-list 'auto-mode-alist '("\\.ilproj\\'"  . xml-mode))
(add-to-list 'auto-mode-alist '("\\.proj\\'"    . xml-mode))
(add-to-list 'auto-mode-alist '("\\.depproj\\'" . xml-mode))
(add-to-list 'auto-mode-alist '("\\.sfxproj\\'" . xml-mode))
(add-to-list 'auto-mode-alist '("\\.props\\'"   . xml-mode))
(add-to-list 'auto-mode-alist '("\\.targets\\'" . xml-mode))

;; Some nice general configuration :)

(setq-default line-number-mode t)
(setq-default column-number-mode t)
(setq-default make-backup-files nil)
(setq-default auto-save-default nil)
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq-default scroll-conservatively most-positive-fixnum)
(setq-default frame-title-format
              '("" "%b%* (%f) %p/%P - GNU Emacs " emacs-version " at " system-name))
(setq-default auth-sources '("~/.authinfo.gpg"))
(setq-default ediff-forward-word-function 'forward-char)
(setq-default delete-selection-mode t)

;; Function to easily toggle between absolute/normal and relative line numbering.

(defun toggle-line-numbers-type ()
  "Toggle between absolute and relative line numbering."
  (if (not (equal display-line-numbers-type 'relative))
      (setq-default display-line-numbers-type 'relative)
    (setq-default display-line-numbers-type 'absolute))
  (display-line-numbers-mode 1))

;; Function to emulate Vim's Normal Mode 'W'.

(defun next-word-start (&optional num)
  "Move to the next (num) word's first character instead of before it."
  (interactive "p")
  (forward-word num)
  (forward-char))

;; Function to emulate Vim's Normal Mode 'dW'.

(defun delete-to-word-start (&optional num)
  "Delete the next (num) words until the following one's first character."
  (interactive "p")
  (kill-word num)
  (delete-char 1))

(windmove-default-keybindings)

;; Useful and Productive Keybindings!

(global-set-key (kbd "C-x x w") 'toggle-word-wrap)
(global-set-key (kbd "C-x x t") 'toggle-truncate-lines)
(global-set-key (kbd "C-x x f") 'menu-set-font)
(global-set-key (kbd "C-<f7>") (lambda () (interactive) (toggle-line-numbers-type)))
(global-set-key (kbd "M-n") 'display-line-numbers-mode)
(global-set-key (kbd "C-x C-M-b") 'ibuffer)
(global-set-key (kbd "C->") 'dot-mode-execute)

;; Text modifying and navigation keyboard shortcuts

(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "M-F") 'next-word-start)
(global-set-key (kbd "M-D") 'delete-to-word-start)
(global-set-key (kbd "C-x E") 'erase-buffer)
(global-set-key (kbd "C-x t h") 'sgml-tag)
(global-set-key (kbd "M-s M-s") 'wrap-region-global-mode)
(global-set-key (kbd "M-s M-r") 'narrow-to-region)
(global-set-key (kbd "M-s M-e") 'widen)

;; Frame manipulation keyboard shortcuts

(global-set-key (kbd "M-g t") 'transpose-frame)
(global-set-key (kbd "M-g r") 'rotate-frame-clockwise)
(global-set-key (kbd "M-g i") 'flip-frame)
(global-set-key (kbd "M-g o") 'flop-frame)

;; Magit keyboard shortcuts.

(global-set-key (kbd "C-x C-k k") 'magit-kill-this-buffer)
(global-set-key (kbd "C-x M-a") 'magit-blame-addition)
(global-set-key (kbd "C-x M-r") 'magit-blame-removal)

;; Keybindings for easy split windows resizing.

(global-set-key (kbd "C-<up>") 'enlarge-window)
(global-set-key (kbd "C-<down>") 'shrink-window)
(global-set-key (kbd "C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-<right>") 'enlarge-window-horizontally)

;; Configured keybindings for multiple cursors mode.

(define-key mc/keymap (kbd "<return>") nil)

(global-set-key (kbd "C-S-c C-S-n") 'mc/edit-lines)
(global-set-key (kbd "C-S-j") 'mc/mark-next-like-this)
(global-set-key (kbd "C-S-k") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)

;; Keywords not highlighted by default but I believe should be.

(font-lock-add-keywords 'emacs-lisp-mode
                        '(("add-hook"             . font-lock-keyword-face)
                          ("add-to-list"          . font-lock-keyword-face)
                          ("custom-set-faces"     . font-lock-keyword-face)
                          ("custom-set-variables" . font-lock-keyword-face)
                          ("define-key"           . font-lock-keyword-face)
                          ("global-set-key"       . font-lock-keyword-face)
                          ("global-unset-key"     . font-lock-keyword-face)
                          ("kbd"                  . font-lock-keyword-face)
                          ("load-file"            . font-lock-keyword-face)
                          ("nil"                  . font-lock-keyword-face)
                          ("put"                  . font-lock-keyword-face)))

(font-lock-add-keywords 'csharp-mode
                        '(("init" . font-lock-keyword-face)))

;; It's really annoying to have Emacs GUI minimized with an accidental typo :(

(when (display-graphic-p)
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z")))

;; Reuse Dired buffer also when moving back up to parent folder.

(add-hook 'dired-mode-hook
          (lambda () (define-key dired-mode-map (kbd "^")
                       (lambda () (interactive) (find-alternate-file "..")))))

;; Grouping buffers by category in IBuffer makes my life so much easier
;; and productive :)

(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("Agenda"    (mode . org-mode))
               ("Bash"      (mode . sh-mode))
               ("C#"        (mode . csharp-mode))
               ("C++"       (mode . c++-mode))
               ("CMake"     (mode . cmake-mode))
               ("MSBuild"   (or
                             (name . "\\.??proj")
                             (name . "\\.props")
                             (name . "\\.targets")))
               ("Ruby"      (mode . ruby-mode))
               ("XML"       (name . "\\.xml"))
               ("YAML"      (mode . yaml-mode))
               ("Terminals" (mode . term-mode))
               ("Dired"     (mode . dired-mode))
               ("Magit"     (name . "magit*"))
               ("TAGS"      (or
                             (mode . tags-table-mode)
                             (name . "^\\*Tags List\\*$")))
               ("Emacs"     (or
                             (mode . Buffer-menu-mode)
                             (mode . grep-mode)
                             (mode . help-mode)
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Backtrace\\*$")
                             (name . "^\\*Completions\\*$")
                             (name . "^\\*GNU Emacs\\*$")
                             (name . "^\\*Messages\\*$")
                             (name . "^\\*Packages\\*$")
                             (name . "^\\*Warnings\\*$")))))))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")))

;; However, I prefer to only see the categories that have buffers open.

(setq-default ibuffer-show-empty-filter-groups nil)

;; I also prefer to have the human-readable notations for buffer sizes, rather than
;; all bytes-only.

(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.2f MB" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 1000)    (format "%7.2f KB" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

(setq ibuffer-formats
      '((mark modified read-only
              " "
              (name 20 20 :left :elide)
              " "
              (size-h 11 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              filename-and-process)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#282b33" "#e1c1ee" "#5b94ab" "#cfcf9c" "#819cd6" "#a6c1e0" "#7289bc" "#c6c6c6"])
 '(column-number-mode t)
 '(cursor-type 'box)
 '(custom-enabled-themes '(deeper-blue))
 '(display-time-mode t)
 '(menu-bar-mode t)

 '(package-selected-packages
   '(evil
     tool-bar+
     dot-mode
     multiple-cursors
     csharp-mode
     julia-mode
     doom-themes
     wrap-region
     vimrc-mode
     transpose-frame
     vscode-dark-plus-theme
     vs-light-theme
     vs-dark-theme
     github-dark-vscode-theme
     lua-mode
     magit
     yaml-mode
     cmake-mode
     dockerfile-mode
     twilight-anti-bright-theme
     badwolf-theme
     clues-theme
     soothe-theme
     flatui-dark-theme
     subatomic-theme
     tangotango-theme
     afternoon-theme
     kaolin-themes
     gruber-darker-theme
     alect-themes
     apropospriate-theme
     ample-theme
     cyberpunk-theme
     moe-theme
     material-theme
     dracula-theme
     gruvbox-theme
     monokai-theme
     spacemacs-theme
     color-theme-modern
     color-theme-sanityinc-tomorrow
     color-theme-sanityinc-solarized
     zenburn-theme
     treemacs))

 '(scroll-bar-mode nil)
 '(size-indication-mode t)
 '(tool-bar-mode t)
 '(warning-suppress-types '((comp) (comp) (comp))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.

 ;; Some themes make the Emacs terminal use very dim colors. So, here's my
 ;; universal color palette set.

 '(term-color-black   ((t (:foreground "#555753"))))
 '(term-color-red     ((t (:foreground "#EF2929"))))
 '(term-color-green   ((t (:foreground "#8AE234"))))
 '(term-color-yellow  ((t (:foreground "#FCE94F"))))
 '(term-color-blue    ((t (:foreground "#729FCF"))))
 '(term-color-magenta ((t (:foreground "#AD7FA8"))))
 '(term-color-cyan    ((t (:foreground "#34E2E2"))))
 '(term-color-white   ((t (:foreground "#EEEEEC"))))

 '(term-default-fg-color ((t (:inherit term-color-white))))
 '(term-default-bg-color ((t (:inherit term-color-black))))
)

;; Advanced functionality I need.

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'erase-buffer 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)
(put 'narrow-to-region 'disabled nil)
